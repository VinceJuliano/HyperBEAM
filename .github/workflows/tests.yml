name: Run hb tests

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    types:
      - opened

jobs:
  test:
    runs-on: self-hosted
    env:
      ImageOS: ubuntu22
    name: Install Deps and Run Tests
    strategy:
      matrix:
        otp: ['27.3.3']
        rebar3: ['3.24.0']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Erlang & rebar3
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.otp }}
          rebar3-version: ${{ matrix.rebar3 }}

      - name: Install system dependencies
        run: |
          sudo apt-get update \
            && sudo apt-get install -y --no-install-recommends \
              git \
              build-essential \
              cmake \
              pkg-config \
              ncurses-dev \
              libssl-dev \
              curl \
              ca-certificates \
            && sudo rm -rf /var/lib/apt/lists/*

      - name: Install cargo
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rustup-init.sh
          sh rustup-init.sh -y --default-toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

        - id: run_eunit
          name: Run EUnit
          shell: bash
          run: |
            set +e                      

            failed=()
            passed=0

            for file in $(find src -type f -name '*.erl'); do
              module=$(basename "$file" .erl)
              echo "=== Testing module: $module ==="

              # Capture output & exit code
              output=$(rebar3 eunit --module $module 2>&1)
              ret=$?
              echo "$output"

              # 1) Look for a summary line: “Failed: X.  Skipped: Y.  Passed: Z.”
              if summary=$(echo "$output" | grep -E 'Failed: [0-9]+\. *Skipped: [0-9]+\. *Passed: [0-9]+\.'); then
                n=$(echo "$summary" | sed -n 's/.*Passed: \([0-9]\+\)\..*/\1/p')
              # 2) Or if it's all-pass: “All N tests passed.”
              elif echo "$output" | grep -qE 'All [0-9]+ tests passed\.'; then
                n=$(echo "$output" | grep -oE 'All [0-9]+' | head -1 | awk '{print $2}')
              # 3) Fallback: count lines ending in “ok”
              else
                n=$(echo "$output" | grep -cE '\.\.\.(\[[0-9. ]+ s\] )?ok$')
              fi

              passed=$((passed + n))

              if [ $ret -ne 0 ]; then
                failed+=("$module")
              fi
            done

            # Export for downstream steps
            echo "failed=${failed[*]}" >> $GITHUB_OUTPUT
            echo "passed=${passed}"   >> $GITHUB_OUTPUT

            # Print a summary in the log
            echo
            echo "✅ Total passed tests: $passed"
            if [ ${#failed[@]} -gt 0 ]; then
              echo
              echo "❌ Failed modules: ${failed[*]}"
              exit 1
            fi


      - name: Notify Slack on Failure
        if: failure()
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          PR_NUMBER:       ${{ github.event.pull_request.number }}
          PR_TITLE:        ${{ github.event.pull_request.title }}
          RUN_URL:         ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          FAILED_LIST:     ${{ steps.run_eunit.outputs.failed }}
          PASSED_COUNT:    ${{ steps.run_eunit.outputs.passed }}
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            TEXT=":x: HyperBEAM tests failed on PR #${PR_NUMBER} ${PR_TITLE}. ✅ ${PASSED_COUNT} passed. ❌ Failed modules: ${FAILED_LIST} "
          else
            TEXT=":x: HyperBEAM tests failed on main. ✅ ${PASSED_COUNT} passed. ❌ Failed modules: ${FAILED_LIST} "
          fi

          curl -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -d "channel=$SLACK_CHANNEL_ID" \
            -d "text=${TEXT} <${RUN_URL}|View test output>"



